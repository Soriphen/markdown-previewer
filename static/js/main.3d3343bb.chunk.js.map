{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["marked","require","hljs","setOptions","breaks","highlight","code","highlightAuto","value","renderer","Renderer","Preview","markdown","markup","__html","dangerouslySetInnerHTML","id","App","React","useState","text","setText","className","style","fontWeight","mode","theme","name","width","height","editorProps","$blockScrolling","onChange","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSASMA,EAASC,EAAQ,IACjBC,EAAOD,EAAQ,IAGrBD,EAAOG,WAAW,CAChBC,QAAQ,EACRC,UAAW,SAASC,GAClB,OAAOJ,EAAKK,cAAcD,GAAME,SAIpC,IAAMC,EAAW,IAAIT,EAAOU,SAuC5B,SAASC,EAAT,GAAgC,IAAbC,EAAY,EAAZA,SACXC,EAAS,CACbC,OAAQd,EAAOY,EAAU,CAAEH,SAAUA,KAGvC,OACE,qBACEM,wBAAyBF,EACzBG,GAAG,YAgDMC,MA3Cf,WACE,MAAwBC,IAAMC,SAnDf,w1BAmDf,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQN,GAAG,aAAaM,UAAU,UAAlC,UACE,qBAAKN,GAAG,YAAR,SACE,oBAAIM,UAAU,YAAYN,GAAG,QAA7B,kCAEF,sBAAKA,GAAG,eAAR,UACE,sBAAKA,GAAG,YAAR,UACE,oBAAIM,UAAU,YAAYN,GAAG,cAAcO,MAAO,CAAEC,WAAY,KAAhE,mBACA,cAAC,IAAD,CACEC,KAAK,WACLC,MAAM,SACNC,KAAK,SACLX,GAAG,SACHO,MAAO,CAAEK,MAAO,OAAQC,OAAQ,SAChCrB,MAAOY,EACPU,YAAa,CAAEC,iBAAiB,GAKhCC,SAAU,SAAAxB,GAAK,OAAIa,EAAQb,IAC3BL,WAAY,CACV8B,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,QAItB,sBAAKnB,GAAG,aAAR,UACE,oBAAIM,UAAU,YAAYN,GAAG,eAAeO,MAAO,CAAEC,WAAY,KAAjE,oBACA,cAACb,EAAD,CAASC,SAAUQ,gBC9FhBgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3d3343bb.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./sass/App.scss\";\nimport AceEditor from \"react-ace\";\nimport 'highlight.js/styles/monokai.css';\n\nimport \"ace-builds/src-noconflict/mode-markdown\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\nconst marked = require('marked');\nconst hljs = require('highlight.js');\n\n\nmarked.setOptions({\n  breaks: true,\n  highlight: function(code) {\n    return hljs.highlightAuto(code).value;\n  }\n});\n\nconst renderer = new marked.Renderer();\n\nconst placeholder = `# **Hello!**\n\n## Want a sub-heading?\n### Or something _less_?\n\n\\`<div>between 2 backticks you get some code</div>\\`\n\n\\`\\`\\`javascript\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nTables | Neat | As Headers too?\n------------ | ------------- | -------------\nDivide them | with those | vertical slashes\n\n- This is pretty handy for all sorts of lists, like a shopping list\n  - Sub-listing\n     - Deeper...\n        - Deep enough\n        1. How about with numbers?\n        1. The numbers add up\n1. Though they don't continue after indenting\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`;\n\n/* dangerouslySetInnerHTML allows the markup, stored as a string, \nto be read exactly as HTML rather than a string with HTML in it */\nfunction Preview({ markdown }) {\n  const markup = {\n    __html: marked(markdown, { renderer: renderer }),\n  };\n\n  return (\n    <div \n      dangerouslySetInnerHTML={markup}\n      id=\"preview\"\n    ></div>\n  );\n}\n \nfunction App() {\n  const [text, setText] = React.useState(placeholder);\n  \n  return (\n    <div className=\"App\">\n      <header id=\"App-header\" className=\"wrapper\">\n        <div id=\"title-box\">\n          <h1 className=\"display-1\" id=\"title\">Markdown Previewer</h1>\n        </div>\n        <div id=\"input-output\">\n          <div id=\"input-box\">\n            <h3 className=\"mt-0 mb-0\" id=\"input-title\" style={{ fontWeight: 100 }}>Input</h3>\n            <AceEditor\n              mode=\"markdown\"\n              theme=\"github\"\n              name=\"editor\"\n              id=\"editor\"\n              style={{ width: \"100%\", height: \"700px\" }}\n              value={text} \n              editorProps={{ $blockScrolling: true }}\n              /* For some reason, passing a function (with event as a prop arg) that returns \n              e.target.value passed in setText raises an error whenever an event occurs. \n              Instead, the code must be written inside react-ace's provided onChange prop. \n              This must be an issue with react-ace as React's own onChange event handler doesn't have this issue */\n              onChange={value => setText(value)} \n              setOptions={{\n                enableBasicAutocompletion: true,\n                enableLiveAutocompletion: true,\n                enableSnippets: true\n              }}\n            />\n          </div>\n          <div id=\"output-box\">\n            <h3 className=\"mt-0 mb-0\" id=\"output-title\" style={{ fontWeight: 100 }}>Output</h3>\n            <Preview markdown={text} />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}